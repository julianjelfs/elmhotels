Elm.TrpTest = Elm.TrpTest || {};
Elm.TrpTest.make = function (_elm) {
   "use strict";
   _elm.TrpTest = _elm.TrpTest || {};
   if (_elm.TrpTest.values) return _elm.TrpTest.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Api = Elm.Api.make(_elm),
   $Autocompleter = Elm.Autocompleter.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Filtering = Elm.Filtering.make(_elm),
   $Filters = Elm.Filters.make(_elm),
   $Header = Elm.Header.make(_elm),
   $HotelsList = Elm.HotelsList.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Pager = Elm.Pager.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $SortBar = Elm.SortBar.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var view = F2(function (address,model) {
      var filtered = $Filtering.restrict(model);
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.section,_U.list([$Html$Attributes.$class("header")]),_U.list([$Header.header]))
              ,A2($Html.section,
              _U.list([$Html$Attributes.$class("sidebar")]),
              _U.list([A2($Autocompleter.view,A2($Signal.forwardTo,address,$Models.AutocompleterUpdate),model.autocompleter)
                      ,A2($Filters.view,filtered.criteria.filter,A2($Signal.forwardTo,address,$Models.FilterChange))]))
              ,A2($Html.section,
              _U.list([$Html$Attributes.$class("content")]),
              _U.list([A2($SortBar.view,filtered.criteria.sort,A2($Signal.forwardTo,address,$Models.SortChange))
                      ,A3($Pager.view,filtered.total,filtered.criteria.paging,A2($Signal.forwardTo,address,$Models.PageChange))
                      ,$HotelsList.hotelList(filtered.hotels)]))
              ,A2($Html.section,
              _U.list([$Html$Attributes.$class("footer")]),
              _U.list([A2($Html.h3,_U.list([]),_U.list([$Html.text("My beautiful footer section")]))]))]));
   });
   var update = F2(function (action,model) {
      var updateCriteria = F2(function (model,criteria) {    return _U.update(model,{criteria: criteria});});
      var criteria = model.criteria;
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "PageChange": return {ctor: "_Tuple2",_0: A2(updateCriteria,model,_U.update(criteria,{paging: _p0._0})),_1: $Effects.none};
         case "FilterChange": return {ctor: "_Tuple2",_0: A2(updateCriteria,model,_U.update(criteria,{filter: _p0._0})),_1: $Effects.none};
         case "SortChange": return {ctor: "_Tuple2",_0: A2(updateCriteria,model,_U.update(criteria,{sort: _p0._0})),_1: $Effects.none};
         case "LoadData": return {ctor: "_Tuple2",_0: _U.update(model,{hotels: _p0._0}),_1: $Effects.none};
         default: var _p3 = _p0._0;
           var _p1 = A2($Autocompleter.update,_p3,model.autocompleter);
           var m = _p1._0;
           var e = _p1._1;
           var _p2 = _p3;
           if (_p2.ctor === "SelectDestination") {
                 return {ctor: "_Tuple2"
                        ,_0: _U.update(model,{autocompleter: m,hotels: _U.list([])})
                        ,_1: $Effects.batch(_U.list([$Effects.task($Api.getHotels(_p2._0)),A2($Effects.map,$Models.AutocompleterUpdate,e)]))};
              } else {
                 return {ctor: "_Tuple2",_0: _U.update(model,{autocompleter: m}),_1: A2($Effects.map,$Models.AutocompleterUpdate,e)};
              }}
   });
   var initialModel = A4($Models.Model,
   _U.list([]),
   0,
   A3($Models.Criteria,$Filters.initialModel,$SortBar.initialModel,$Pager.initialModel),
   $Autocompleter.initialModel);
   var app = $StartApp.start({init: {ctor: "_Tuple2",_0: initialModel,_1: $Effects.task($Api.getHotels(initialModel.autocompleter.selected))}
                             ,view: view
                             ,update: update
                             ,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.TrpTest.values = {_op: _op,initialModel: initialModel,update: update,view: view,app: app,main: main};
};