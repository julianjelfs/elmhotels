Elm.Filtering = Elm.Filtering || {};
Elm.Filtering.make = function (_elm) {
   "use strict";
   _elm.Filtering = _elm.Filtering || {};
   if (_elm.Filtering.values) return _elm.Filtering.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $HotelsList = Elm.HotelsList.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Pager = Elm.Pager.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $SortBar = Elm.SortBar.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var ratingAtLeast = F2(function (min,hotel) {    return _U.cmp(hotel.rating,min) > -1;});
   var priceLessThan = F2(function (min,hotel) {    return _U.cmp(hotel.price,min) > -1;});
   var starsMatch = F2(function (starsFilter,hotel) {
      var _p0 = starsFilter;
      if (_p0.ctor === "::") {
            return A2($List.member,hotel.stars,starsFilter);
         } else {
            return true;
         }
   });
   var nameMatches = F2(function (query,hotel) {
      var nameLower = $String.toLower(hotel.name);
      var queryLower = $String.toLower(query);
      return A2($String.contains,queryLower,nameLower);
   });
   var filter = function (model) {
      var filterFn = function (h) {
         return A2(ratingAtLeast,model.criteria.filter.minRating,h) && (A2(priceLessThan,model.criteria.filter.minPrice,h) && (A2(starsMatch,
         model.criteria.filter.stars,
         h) && A2(nameMatches,model.criteria.filter.hotelName,h)));
      };
      var hotels = A2($List.filter,filterFn,model.hotels);
      return _U.update(model,{hotels: hotels,total: $List.length(hotels)});
   };
   var sort = function (model) {
      var sortFn = function (hotels) {
         var _p1 = model.criteria.sort;
         switch (_p1.ctor)
         {case "HotelName": return A2($List.sortBy,function (_) {    return _.name;},hotels);
            case "Stars": return $List.reverse(A2($List.sortBy,function (_) {    return _.stars;},hotels));
            case "Rating": return $List.reverse(A2($List.sortBy,function (_) {    return _.rating;},hotels));
            default: return A2($List.sortBy,function (_) {    return _.price;},hotels);}
      };
      var hotels = sortFn(model.hotels);
      return _U.update(model,{hotels: hotels});
   };
   var adjustPaging = F2(function (total,criteria) {
      var paging = criteria.paging;
      return _U.cmp(paging.pageIndex * paging.pageSize,total) > 0 ? _U.update(criteria,{paging: $Pager.initialModel}) : criteria;
   });
   var page = function (model) {
      var criteria = A2(adjustPaging,model.total,model.criteria);
      var paging = criteria.paging;
      var page = A2($List.take,paging.pageSize,A2($List.drop,paging.pageIndex * paging.pageSize,model.hotels));
      return _U.update(model,{hotels: page,criteria: criteria});
   };
   var restrict = function (model) {
      var criteria = model.criteria;
      var hotels = model.hotels;
      var newModel = _U.update(model,{total: $List.length(hotels)});
      return page(sort(filter(newModel)));
   };
   return _elm.Filtering.values = {_op: _op
                                  ,adjustPaging: adjustPaging
                                  ,page: page
                                  ,sort: sort
                                  ,nameMatches: nameMatches
                                  ,starsMatch: starsMatch
                                  ,priceLessThan: priceLessThan
                                  ,ratingAtLeast: ratingAtLeast
                                  ,filter: filter
                                  ,restrict: restrict};
};