var _julianjelfs$elmhotels$Autocompleter$destinations = function () {
	var dest = A9(
		_elm_lang$core$Json_Decode$object8,
		_julianjelfs$elmhotels$Destination$Destination,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'CountryId', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'ProvinceId', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'LocationId', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'PlaceId', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'EstablishmentId', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'PolygonId', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'EstablishmentCount', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'Title', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'Destinations',
		_elm_lang$core$Json_Decode$list(dest));
}();
var _julianjelfs$elmhotels$Autocompleter$tenerife = A8(_julianjelfs$elmhotels$Destination$Destination, 3522, 54875, 0, 0, 0, 0, 0, 'Tenerife, Spain');
var _julianjelfs$elmhotels$Autocompleter$emptyDestination = A8(_julianjelfs$elmhotels$Destination$Destination, 0, 0, 0, 0, 0, 0, 0, '');
var _julianjelfs$elmhotels$Autocompleter$Model = F3(
	function (a, b, c) {
		return {destinations: a, query: b, selected: c};
	});
var _julianjelfs$elmhotels$Autocompleter$initialModel = A3(
	_julianjelfs$elmhotels$Autocompleter$Model,
	_elm_lang$core$Native_List.fromArray(
		[]),
	'Tenerife, Spain',
	_julianjelfs$elmhotels$Autocompleter$tenerife);
var _julianjelfs$elmhotels$Autocompleter$LoadResultsFailed = function (a) {
	return {ctor: 'LoadResultsFailed', _0: a};
};
var _julianjelfs$elmhotels$Autocompleter$LoadResultsSucceeded = function (a) {
	return {ctor: 'LoadResultsSucceeded', _0: a};
};
var _julianjelfs$elmhotels$Autocompleter$getDestinations = function (query) {
	return A3(
		_elm_lang$core$Task$perform,
		_julianjelfs$elmhotels$Autocompleter$LoadResultsFailed,
		_julianjelfs$elmhotels$Autocompleter$LoadResultsSucceeded,
		A2(
			_evancz$elm_http$Http$get,
			_julianjelfs$elmhotels$Autocompleter$destinations,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'https://m.travelrepublic.co.uk/api2/destination/v2/search?SearchTerm=',
				A2(_elm_lang$core$Basics_ops['++'], query, '&MaxResults=15&CultureCode=en-gb&RestrictToFlightDestinations=false&v=1.0.6978'))));
};
var _julianjelfs$elmhotels$Autocompleter$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'QueryChanged':
				var _p1 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{query: _p1}),
					_1: _julianjelfs$elmhotels$Autocompleter$getDestinations(_p1)
				};
			case 'SelectDestination':
				var _p2 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selected: _p2,
							destinations: _elm_lang$core$Native_List.fromArray(
								[]),
							query: _p2.title
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'LoadResultsSucceeded':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{destinations: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var e = A2(_elm_lang$core$Debug$log, 'Autocompleter lookup failed: ', _p0._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _julianjelfs$elmhotels$Autocompleter$SelectDestination = function (a) {
	return {ctor: 'SelectDestination', _0: a};
};
var _julianjelfs$elmhotels$Autocompleter$destination = function (dest) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onClick(
				_julianjelfs$elmhotels$Autocompleter$SelectDestination(dest))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							dest.title,
							A2(
								_elm_lang$core$Basics_ops['++'],
								', (',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(dest.establishmentCount),
									' hotels)'))))
					]))
			]));
};
var _julianjelfs$elmhotels$Autocompleter$QueryChanged = function (a) {
	return {ctor: 'QueryChanged', _0: a};
};
var _julianjelfs$elmhotels$Autocompleter$view = function (model) {
	return A2(
		_elm_lang$html$Html$section,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('autocompleter')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h3,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Destination')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$placeholder('Search for a destination'),
								_elm_lang$html$Html_Attributes$autofocus(true),
								_elm_lang$html$Html_Attributes$type$('text'),
								_elm_lang$html$Html_Attributes$value(model.query),
								_elm_lang$html$Html_Events$onInput(
								function (str) {
									return _julianjelfs$elmhotels$Autocompleter$QueryChanged(str);
								})
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('results')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$ul,
						_elm_lang$core$Native_List.fromArray(
							[]),
						A2(_elm_lang$core$List$map, _julianjelfs$elmhotels$Autocompleter$destination, model.destinations))
					]))
			]));
};
