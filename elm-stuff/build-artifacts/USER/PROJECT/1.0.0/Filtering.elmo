Elm.Filtering = Elm.Filtering || {};
Elm.Filtering.make = function (_elm) {
   "use strict";
   _elm.Filtering = _elm.Filtering || {};
   if (_elm.Filtering.values)
   return _elm.Filtering.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Filtering",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var nameMatches = F2(function (query,
   hotel) {
      return function () {
         var nameLower = $String.toLower(hotel.name);
         var queryLower = $String.toLower(query);
         return A2($String.contains,
         queryLower,
         nameLower);
      }();
   });
   var filter = F2(function (criteria,
   hotels) {
      return A2($List.filter,
      nameMatches(criteria.filter.hotelName),
      hotels);
   });
   var sort = F2(function (criteria,
   hotels) {
      return function () {
         var _v0 = criteria.sort;
         switch (_v0.ctor)
         {case "HotelName":
            return A2($List.sortBy,
              function (_) {
                 return _.name;
              },
              hotels);
            case "Price":
            return A2($List.sortBy,
              function (_) {
                 return _.price;
              },
              hotels);
            case "Rating":
            return A2($List.sortBy,
              function (_) {
                 return _.rating;
              },
              hotels);
            case "Stars":
            return A2($List.sortBy,
              function (_) {
                 return _.stars;
              },
              hotels);}
         _U.badCase($moduleName,
         "between lines 18 and 22");
      }();
   });
   var page = F2(function (criteria,
   hotels) {
      return function () {
         var paging = criteria.paging;
         var page = $List.take(paging.pageSize)($List.drop(paging.pageIndex * paging.pageSize)(hotels));
         return A4($Debug.log,
         $Basics.toString($List.length(page)),
         $Models.Model,
         page,
         criteria);
      }();
   });
   var restrict = F2(function (hotels,
   criteria) {
      return page(criteria)(sort(criteria)(filter(criteria)(hotels)));
   });
   _elm.Filtering.values = {_op: _op
                           ,page: page
                           ,sort: sort
                           ,nameMatches: nameMatches
                           ,filter: filter
                           ,restrict: restrict};
   return _elm.Filtering.values;
};