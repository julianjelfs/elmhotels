Elm.TrpTest = Elm.TrpTest || {};
Elm.TrpTest.make = function (_elm) {
   "use strict";
   _elm.TrpTest = _elm.TrpTest || {};
   if (_elm.TrpTest.values)
   return _elm.TrpTest.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "TrpTest",
   $Api = Elm.Api.make(_elm),
   $Autocompleter = Elm.Autocompleter.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Filtering = Elm.Filtering.make(_elm),
   $Filters = Elm.Filters.make(_elm),
   $Header = Elm.Header.make(_elm),
   $HotelsList = Elm.HotelsList.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Pager = Elm.Pager.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $SortBar = Elm.SortBar.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var view = F2(function (address,
   model) {
      return function () {
         var filtered = $Filtering.restrict(model);
         return A2($Html.div,
         _L.fromArray([]),
         _L.fromArray([A2($Html.section,
                      _L.fromArray([$Html$Attributes.$class("header")]),
                      _L.fromArray([$Header.header]))
                      ,A2($Html.section,
                      _L.fromArray([$Html$Attributes.$class("sidebar")]),
                      _L.fromArray([A2($Autocompleter.view,
                                   A2($Signal.forwardTo,
                                   address,
                                   $Models.AutocompleterUpdate),
                                   model.autocompleter)
                                   ,A2($Filters.view,
                                   filtered.criteria.filter,
                                   A2($Signal.forwardTo,
                                   address,
                                   $Models.FilterChange))]))
                      ,A2($Html.section,
                      _L.fromArray([$Html$Attributes.$class("content")]),
                      _L.fromArray([A2($SortBar.view,
                                   filtered.criteria.sort,
                                   A2($Signal.forwardTo,
                                   address,
                                   $Models.SortChange))
                                   ,A3($Pager.view,
                                   filtered.total,
                                   filtered.criteria.paging,
                                   A2($Signal.forwardTo,
                                   address,
                                   $Models.PageChange))
                                   ,$HotelsList.hotelList(filtered.hotels)]))
                      ,A2($Html.section,
                      _L.fromArray([$Html$Attributes.$class("footer")]),
                      _L.fromArray([A2($Html.h3,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("My beautiful footer section")]))]))]));
      }();
   });
   var update = F2(function (action,
   model) {
      return function () {
         var updateCriteria = F2(function (model,
         criteria) {
            return _U.replace([["criteria"
                               ,criteria]],
            model);
         });
         var criteria = model.criteria;
         return function () {
            switch (action.ctor)
            {case "AutocompleterUpdate":
               return function () {
                    var $ = A2($Autocompleter.update,
                    action._0,
                    model.autocompleter),
                    m = $._0,
                    e = $._1;
                    return function () {
                       switch (action._0.ctor)
                       {case "SelectDestination":
                          return {ctor: "_Tuple2"
                                 ,_0: _U.replace([["autocompleter"
                                                  ,m]
                                                 ,["hotels",_L.fromArray([])]],
                                 model)
                                 ,_1: $Effects.batch(_L.fromArray([$Effects.task($Api.getHotels(action._0._0))
                                                                  ,A2($Effects.map,
                                                                  $Models.AutocompleterUpdate,
                                                                  e)]))};}
                       return {ctor: "_Tuple2"
                              ,_0: _U.replace([["autocompleter"
                                               ,m]],
                              model)
                              ,_1: A2($Effects.map,
                              $Models.AutocompleterUpdate,
                              e)};
                    }();
                 }();
               case "FilterChange":
               return {ctor: "_Tuple2"
                      ,_0: A2(updateCriteria,
                      model,
                      _U.replace([["filter"
                                  ,action._0]],
                      criteria))
                      ,_1: $Effects.none};
               case "LoadData":
               return {ctor: "_Tuple2"
                      ,_0: _U.replace([["hotels"
                                       ,action._0]],
                      model)
                      ,_1: $Effects.none};
               case "NoOp":
               return {ctor: "_Tuple2"
                      ,_0: model
                      ,_1: $Effects.none};
               case "PageChange":
               return {ctor: "_Tuple2"
                      ,_0: A2(updateCriteria,
                      model,
                      _U.replace([["paging"
                                  ,action._0]],
                      criteria))
                      ,_1: $Effects.none};
               case "SortChange":
               return {ctor: "_Tuple2"
                      ,_0: A2(updateCriteria,
                      model,
                      _U.replace([["sort",action._0]],
                      criteria))
                      ,_1: $Effects.none};}
            _U.badCase($moduleName,
            "between lines 31 and 58");
         }();
      }();
   });
   var initialModel = A4($Models.Model,
   _L.fromArray([]),
   0,
   A3($Models.Criteria,
   $Filters.initialModel,
   $SortBar.initialModel,
   $Pager.initialModel),
   $Autocompleter.initialModel);
   var app = $StartApp.start({_: {}
                             ,init: {ctor: "_Tuple2"
                                    ,_0: initialModel
                                    ,_1: $Effects.task($Api.getHotels(initialModel.autocompleter.selected))}
                             ,inputs: _L.fromArray([])
                             ,update: update
                             ,view: view});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",
   app.tasks);
   _elm.TrpTest.values = {_op: _op
                         ,initialModel: initialModel
                         ,update: update
                         ,view: view
                         ,app: app
                         ,main: main};
   return _elm.TrpTest.values;
};