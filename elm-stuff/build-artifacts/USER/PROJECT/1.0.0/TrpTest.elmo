Elm.TrpTest = Elm.TrpTest || {};
Elm.TrpTest.make = function (_elm) {
   "use strict";
   _elm.TrpTest = _elm.TrpTest || {};
   if (_elm.TrpTest.values)
   return _elm.TrpTest.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "TrpTest",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Filtering = Elm.Filtering.make(_elm),
   $Filters = Elm.Filters.make(_elm),
   $Header = Elm.Header.make(_elm),
   $HotelsList = Elm.HotelsList.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Pager = Elm.Pager.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $SortBar = Elm.SortBar.make(_elm),
   $Task = Elm.Task.make(_elm);
   var hotels = function () {
      var hotel = A7($Json$Decode.object6,
      $Models.Hotel,
      A2($Json$Decode._op[":="],
      "Name",
      $Json$Decode.string),
      A2($Json$Decode._op[":="],
      "ThumbnailUrl",
      $Json$Decode.string),
      A2($Json$Decode._op[":="],
      "ImageUrl",
      $Json$Decode.string),
      A2($Json$Decode._op[":="],
      "Stars",
      $Json$Decode.$int),
      A2($Json$Decode._op[":="],
      "UserRating",
      $Json$Decode.$float),
      A2($Json$Decode._op[":="],
      "MinCost",
      $Json$Decode.$float));
      return A2($Json$Decode._op[":="],
      "Establishments",
      $Json$Decode.list(hotel));
   }();
   var getHotels = A2($Http.get,
   hotels,
   "hotels.json");
   var results = $Signal.mailbox(_L.fromArray([]));
   var unwrapHotels = function (result) {
      return function () {
         switch (result.ctor)
         {case "Err":
            return A4($Debug.log,
              $Basics.toString(result._0),
              $Signal.send,
              results.address,
              _L.fromArray([]));
            case "Ok":
            return A2($Signal.send,
              results.address,
              result._0);}
         _U.badCase($moduleName,
         "between lines 62 and 66");
      }();
   };
   var requests = Elm.Native.Task.make(_elm).perform(A2($Task.andThen,
   $Task.toResult(getHotels),
   unwrapHotels));
   var query = $Signal.mailbox(A3($Models.Criteria,
   A4($Models.Filter,
   _L.fromArray([]),
   0,
   "",
   0),
   $Models.HotelName,
   A2($Models.Paging,20,0)));
   var restrictedResults = A3($Signal.map2,
   $Filtering.restrict,
   results.signal,
   query.signal);
   var view = function (model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([A2($Html.section,
                   _L.fromArray([$Html$Attributes.$class("header")]),
                   _L.fromArray([$Header.header]))
                   ,A2($Html.section,
                   _L.fromArray([$Html$Attributes.$class("sidebar")]),
                   _L.fromArray([A2($Filters.filters,
                   model.criteria,
                   query.address)]))
                   ,A2($Html.section,
                   _L.fromArray([$Html$Attributes.$class("content")]),
                   _L.fromArray([A2($SortBar.sortBar,
                                model.criteria,
                                query.address)
                                ,A2($Pager.pager,
                                model,
                                query.address)
                                ,$HotelsList.hotelList(model.hotels)]))
                   ,A2($Html.section,
                   _L.fromArray([$Html$Attributes.$class("footer")]),
                   _L.fromArray([A2($Html.h3,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text("My beautiful footer section")]))]))]));
   };
   var main = A2($Signal.map,
   view,
   restrictedResults);
   _elm.TrpTest.values = {_op: _op
                         ,view: view
                         ,main: main
                         ,restrictedResults: restrictedResults
                         ,query: query
                         ,results: results
                         ,unwrapHotels: unwrapHotels
                         ,getHotels: getHotels
                         ,hotels: hotels};
   return _elm.TrpTest.values;
};