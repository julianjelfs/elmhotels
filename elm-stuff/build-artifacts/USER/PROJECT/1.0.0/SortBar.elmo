Elm.SortBar = Elm.SortBar || {};
Elm.SortBar.make = function (_elm) {
   "use strict";
   _elm.SortBar = _elm.SortBar || {};
   if (_elm.SortBar.values)
   return _elm.SortBar.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "SortBar",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var mailbox = $Signal.mailbox($Models.HotelName);
   var signal = mailbox.signal;
   var sortButton = F3(function (currentSort,
   sort,
   label) {
      return function () {
         var cls = _U.eq(currentSort,
         sort) ? "button sort-bar-button sort-selected" : "button sort-bar-button";
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.$class(cls)
                      ,A2($Html$Events.onClick,
                      mailbox.address,
                      sort)]),
         _L.fromArray([$Html.text(label)]));
      }();
   });
   var sortBar = function (sort) {
      return A2($Html.section,
      _L.fromArray([$Html$Attributes.$class("sort-bar")]),
      _L.fromArray([A3(sortButton,
                   sort,
                   $Models.HotelName,
                   "Name")
                   ,A3(sortButton,
                   sort,
                   $Models.Stars,
                   "Stars")
                   ,A3(sortButton,
                   sort,
                   $Models.Rating,
                   "Rating")
                   ,A3(sortButton,
                   sort,
                   $Models.Price,
                   "Price")]));
   };
   _elm.SortBar.values = {_op: _op
                         ,signal: signal
                         ,sortBar: sortBar};
   return _elm.SortBar.values;
};